{"version":3,"sources":["logo.svg","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Input","_ref","field","onChangeChannel","form","type","react_default","a","createElement","className","htmlFor","name","Object","assign","onChange","apply","arguments","handleChange","host","window","location","initialState","text","DpM","freq","ch","password","currentChanel","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tryConnectRadio","length","undefined","radioSocket","WebSocket","concat","binaryType","onmessage","handleRadioMsg","onerror","setTimeout","onclose","e","console","log","message","data","arr","convert","audioContext","AudioContext","webkitAudioContext","buffer","createBuffer","copyToChannel","source","createBufferSource","connect","destination","start","us","Uint8Array","fs","Float32Array","i","changeChannel","readyState","OPEN","close","target","value","tryConnectNews","newsSocket","handleNewsMsg","_ref2","append","news","state","slice","push","toUpperCase","shift","setState","submitNewMessage","values","fetch","method","mode","body","JSON","stringify","dpm","frequency","need_base32","is_private","_this2","src","logo","alt","formik_esm","initialValues","onSubmit","component","map","t","key","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6bb5c69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.63618310.svg\";","import React from \"react\";\nimport \"./Input.css\";\n\nconst Input = ({ field, onChangeChannel, form, type}) => {\n  const onChange = (...args) => {\n    if (onChangeChannel) {\n      onChangeChannel(...args);\n    }\n    form.handleChange(...args);\n  };\n  return (\n    <label className={\"Input-label\"} htmlFor={field.name}>\n      {field.name}: <input className={\"Input\"} {...field} type={type} onChange={onChange} />\n    </label>\n  );\n};\nexport default Input;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport Input from \"./components/Input\";\nimport \"./App.css\";\nimport { Formik, Form, Field } from \"formik\";\n\nconst host = window.location.host;\n\n\nconst initialState = {\n  text: \"SOS\",\n  DpM: 500,\n  freq: 1000,\n  ch: \"RUCTFE\",\n  password: \"\",\n};\n\nlet currentChanel = initialState.ch;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      news: [\"RUCTFE\", \"RUCTFE\", \"RUCTFE\", \"RUCTFE\", \"RUCTFE\"]\n    };\n    this.tryConnectRadio(initialState.ch);\n    this.tryConnectNews();\n  }\n\n  tryConnectRadio = (ch = initialState.ch) => {\n    try {\n      const radioSocket = new WebSocket(`ws://${host}/radio/${ch}`);\n      radioSocket.binaryType = \"arraybuffer\";\n      radioSocket.onmessage = this.handleRadioMsg;\n     \n      radioSocket.onerror = () => {\n        if (ch == currentChanel) {\n          setTimeout(this.tryConnectRadio, 1000)\n        }\n          \n      };\n      radioSocket.onclose = () => {\n        if (ch == currentChanel) {\n          setTimeout(this.tryConnectRadio, 1000)\n        }\n      };\n      \n\n      this.radioSocket = radioSocket;\n    } catch (e) {\n      console.log(`ðŸ’©: ${e.message}`);\n    }\n  };\n\n  handleRadioMsg = ({ data }) => {\n    try {\n      const arr = this.convert(data);\n      const Ctx = window.AudioContext || window.webkitAudioContext;\n      const audioContext = new Ctx();\n      const buffer = audioContext.createBuffer(1, arr.length, 8000);\n      buffer.copyToChannel(arr, 0, 0);\n      const source = audioContext.createBufferSource();\n      source.buffer = buffer;\n      source.connect(audioContext.destination);\n      source.start();\n    } catch (e) {\n      console.log(`ðŸ’©: ${e.message}`);\n    }\n  };\n\n  convert = data => {\n    const us = new Uint8Array(data);\n    const fs = new Float32Array(us.length);\n    for (let i = 0; i < us.length; i++) {\n      fs[i] = us[i] / 128 - 1;\n    }\n    return fs;\n  };\n\n  changeChannel = e => {\n    if (this.radioSocket.readyState === WebSocket.OPEN)\n      this.radioSocket.close();\n    this.tryConnectRadio(e.target.value);\n    currentChanel = e.target.value;\n  };\n\n  tryConnectNews = () => {\n    try {\n      const newsSocket = new WebSocket(`ws://${host}/news`);\n      newsSocket.onmessage = this.handleNewsMsg;\n      newsSocket.onerror = () => setTimeout(this.tryConnectNews, 1000);\n      newsSocket.onclose = () => setTimeout(this.tryConnectNews, 1000);\n      this.newsSocket = newsSocket;\n    } catch (e) {\n      console.log(`ðŸ’©: ${e.message}`);\n    }\n  };\n\n  handleNewsMsg = ({ data }) => {\n    try {\n      this.append(data);\n    } catch (e) {\n      console.log(`ðŸ’©: ${e.message}`);\n    }\n  };\n\n  append = text => {\n    const news = this.state.news.slice();\n    news.push(text.toUpperCase());\n    if (news.length > 5) {\n      news.shift();\n    }\n    this.setState({ news });\n  };\n\n  render() {\n    const { news } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Formik initialValues={initialState} onSubmit={this.submitNewMessage}>\n            {() => (\n              <Form className={\"App-form\"}>\n                <Field name=\"text\" component={Input} />\n                <Field name=\"DpM\" component={Input} />\n                <Field name=\"freq\" component={Input} />\n                <Field\n                  onChangeChannel={this.changeChannel}\n                  name=\"ch\"\n                  component={Input}\n                />\n                <Field name=\"password\" type=\"password\" component={Input} />\n                <button className=\"App-btn\" type=\"submit\">\n                  send\n                </button>\n              </Form>\n            )}\n          </Formik>\n          <section className={\"App-news\"}>\n            {news.map((t, i) => (\n              <div className={\"App-text\"} key={i}>\n                {t.toUpperCase()}\n              </div>\n            ))}\n          </section>\n        </header>\n      </div>\n    );\n  }\n\n  submitNewMessage = values =>\n    fetch(`http://${host}/db/${values.ch}`, {\n      method: \"post\",\n      mode: \"no-cors\",\n      body: JSON.stringify({\n        dpm: values.DpM,\n        frequency: values.freq,\n        text: values.text.toUpperCase(),\n        need_base32: false,\n        is_private: false,\n        password: values.password,\n      })\n    });\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}