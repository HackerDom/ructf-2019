#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <stdint.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/personality.h>

const unsigned int MEMORY_SIZE = 1024;
const unsigned int MAX_INPUT_LEN = 1024;
const unsigned int MAX_OUTPUT_LEN = 1024;
const unsigned int MAX_OPERATION = 60000;

static inline int disable_aslr() {
    unsigned long pers_value = PER_LINUX | ADDR_NO_RANDOMIZE;
    if (personality(pers_value) < 0) {
        if (personality(pers_value) < 0) {
            return 1;
        }
    }
    return 0;
}

struct Stack {
    int* stack;
    unsigned int cap;
    unsigned int len;
};

struct Stack* new_stack(unsigned int start_cap) {
    struct Stack* stack = malloc(sizeof(struct Stack));
    stack->stack = (int*)malloc(start_cap * sizeof(int));
    stack->cap = start_cap;
    stack->len = 0;
    return stack;
}

void push(struct Stack* stack, int x) {
    if (stack->len + 1 > stack->cap) {
        stack->stack = realloc(stack->stack, stack->cap * 2);
    }
    stack->stack[stack->len++] = x;
}

char pop(struct Stack* stack) {
    if (!stack->len) {
        return 1;
    }
    stack->len--;
    return 0;
}

char top(struct Stack* stack, int* x) {
    if (!stack->len) {
        return 1;
    }
    *x = stack->stack[stack->len - 1];
    return 0;
}

void free_stack(struct Stack* stack) {
    free(stack->stack);
    stack->stack = NULL;
    stack->len = 0;
    stack->cap = 0;
}

int skip(char* code, size_t code_size, int index) {
    int deep = 0;
    for (int i = index; i < code_size; ++i) {
        if (code[i] == '[') {
            deep++;
        } else if (code[i] == ']') {
            deep--;
        }
        if (!deep) {
            return i;
        }
    }
    return 0;
}

const char* codes2errors[] = {
    "OK",
    "output limit exceeded",
    "input limit exceeded",
    "incorrect braces",
    "incorrect braces",
    "ops limit exceeded",
    "incorrect braces",
    "memory error"
};

int run_bh_code(char* code, int code_len, char* input, int input_len, char* output, int max_output_len, unsigned int max_operations, unsigned int* written_bytes) {
    int output_pointer = 0;
    int input_pointer = 0;
    char cells[MEMORY_SIZE];
    int operations = 0;
    memset(cells, 0, MEMORY_SIZE);
    size_t pointer = 0;
    struct Stack* braces = new_stack(10);

    char* output_ptr = (char*)mmap(NULL, max_output_len, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);

    if (output_ptr == MAP_FAILED) {
        return 7;
    }

    memset(output_ptr, 0, max_output_len);
    for (int i = 0; i < code_len; ++i) {
        if (code[i] == '+') {
            cells[pointer]++;
        } else if (code[i] == '-') {
            cells[pointer]--;
        } else if (code[i] == '.') {
            if (output_pointer >= max_output_len) {
                free_stack(braces);
                return 1;
            }
            output_ptr[output_pointer++] = cells[pointer];
        } else if (code[i] == ',') {
            if (input_pointer >= input_len) {
                free_stack(braces);
                return 2;
            }
            cells[pointer] = input[input_pointer++];
        } else if (code[i] == '>') {
            pointer++;
//            if (++pointer == MEMORY_SIZE) {
//                pointer = 0;
//            }
        } else if (code[i] == '<') {
            if (--pointer == -1) {
                pointer = MEMORY_SIZE - 1;
            }
        } else if (code[i] == '[') {

            if (!cells[pointer]) {
                int new_index = skip(code, code_len, i);
                if (!new_index) {
                    free_stack(braces);
                    return 3;
                } else {
                    i = new_index;
                }
            } else {
                push(braces, i);
            }
        } else if (code[i] == ']') {
            if (!braces->len) {
                free_stack(braces);
                return 4;
            } else {
                top(braces, &i);
                i--;
                pop(braces);
            }
        }
        if (operations++ > max_operations) {
            free_stack(braces);
            return 5;
        }
    }
    if (braces->len) {
        free_stack(braces);
        return 6;
    }
    free_stack(braces);
    memcpy(output, output_ptr, max_output_len);
    *written_bytes = output_pointer;
    return 0;
}

int main(int argc, char* argv[]) {
    if (strcmp(argv[1], "hhfg")) {
        disable_aslr();
        char* new_argv[] = {
            argv[0],
            "hhfg",
            argv[1],
            NULL
        };
        int code = execvp(new_argv[0], new_argv);
        return 0;
    }
    char* code = argv[2];
    int code_len = strlen(code);
    char input[MAX_INPUT_LEN];
    char output[MAX_OUTPUT_LEN];
    int input_len = 0;
    char c;
    while ((char)(c = getc(stdin)) != (char)EOF && input_len < MAX_INPUT_LEN) {
        input[input_len++] = c;
    }
    unsigned int written_bytes;
    int ret_code = run_bh_code(code, code_len, input, input_len, output, MAX_OUTPUT_LEN, MAX_OPERATION, &written_bytes);
    if (ret_code) {
        fprintf(stderr, "%s", codes2errors[ret_code]);
        return ret_code;
    }
    for (unsigned int i = 0; i < written_bytes; ++i) {
        putc(output[i], stdout);
    }
    return 0;
}
